{"version":3,"sources":["Error.js","App.js","serviceWorker.js","resetpassword/FormPasswordReset.js","index.js","loading.gif"],"names":["Error","id","className","href","apiUrl","process","App","React","Component","constructor","props","super","setCompanyIdAndOfficeId","val","values","queryString","parse","companyId","officeId","this","setState","setNewImage","state","error","isLoading","now","Date","getTime","url","console","log","nextCountdown","bind","componentWillReceiveProps","nextProps","nextContext","location","search","componentDidMount","task","cron","schedule","render","src","loading","style","display","alt","onLoad","event","onError","destroy","date","withRouter","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","FormPasswordReset","resetPassword","password","clientId","username","token","data","axios","post","response","returnCode","alert","returnMessage","setTimeout","open","close","setParams","parseInt","textAlign","marginBottom","initialValues","confirmPassword","validationSchema","Yup","shape","min","required","oneOf","onSubmit","fields","errors","status","touched","htmlFor","name","type","component","ReactDOM","HashRouter","Route","exact","path","document","getElementById","URL","origin","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.707a8cce.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = () => {\n    return (<>\n        <div id=\"notfound\">\n            <div className=\"notfound\">\n                <div className=\"notfound-404\">\n                    <h1>500</h1>\n                </div>\n                <h2>Hệ thống có lỗi. Vui lòng thử lại sau.</h2>\n                <p>Đã xảy ra lỗi khi tải dữ liệu. Vui lòng tải lại trang</p>\n                <p>hoặc liên hệ quản trị viên để được hỗ trợ.</p>\n                {/*eslint-disable-next-line*/}\n                <a href=\"javascript:window.location.reload(true)\">Tải lại trang</a>\n            </div>\n        </div>\n    </>)\n};\n\nexport default Error;\n","import React from 'react';\nimport './index.css';\nimport {withRouter} from 'react-router-dom';\nimport cron from \"node-cron\";\nimport queryString from 'query-string';\nimport Countdown from 'react-countdown';\nimport Error from \"./Error\";\nimport loading from './loading.gif';\n\nconst apiUrl = `${process.env.REACT_APP_CS_ADMIN_URL}/genqrcode`;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: '',\n            isLoading: true,\n            companyId: '',\n            officeId: '',\n            nextCountdown: new Date(),\n            error: false,\n        };\n\n        this.setNewImage = this.setNewImage.bind(this);\n        this.setCompanyIdAndOfficeId = this.setCompanyIdAndOfficeId.bind(this);\n    }\n\n    setCompanyIdAndOfficeId = (val) => {\n        const values = queryString.parse(val);\n        const {companyId, officeId} = values;\n\n        this.setState({\n            companyId: companyId,\n            officeId: officeId\n        }, () => {\n            this.setNewImage();\n        });\n\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (this.props.location.search !== nextProps.location.search) {\n            this.setCompanyIdAndOfficeId(nextProps.location.search);\n        }\n    }\n\n    componentDidMount() {\n        this.setCompanyIdAndOfficeId(this.props.location.search);\n\n        this.task = cron.schedule(\"*/5 * * * *\", () => {\n            this.setNewImage();\n        }, null);\n    }\n\n    setNewImage = () => {\n        if (this.state.error) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        const {companyId, officeId} = this.state;\n        const now = new Date().getTime();\n        // TODO : Remove this, load from config server\n        const url = `${apiUrl}?companyId=${companyId}&officeId=${officeId}&reqDate=${now}`;\n\n        console.log(`Load new QR Code at : ${now}\\nURL = ${url}`);\n        this.setState({\n            url: url,\n            nextCountdown: now + 300000\n        })\n    };\n\n    render() {\n        const {url, nextCountdown, error, isLoading} = this.state;\n\n        if (error) {\n            return <Error/>\n        }\n\n        return (\n            <>\n                <div>\n                    <img src={loading}\n                         style={{display: isLoading ? 'block' : 'none'}}\n                         className={\"center-div\"}\n                         alt={\"loading\"}/>\n\n                    <img alt={\"qrcode\"}\n                         style={{display: isLoading ? 'none' : 'block'}}\n                         className={\"center-div\"}\n                         src={url}\n                         onLoad={(event) => {\n                             this.setState({\n                                 isLoading: false,\n                             })\n                         }}\n                         onError={(event) => {\n                             this.task.destroy();\n                             this.setState({\n                                 error: true\n                             })\n                         }}\n                    />\n                </div>\n                <div className={\"countdown\"}\n                     style={{display: isLoading ? 'none' : 'block'}}\n                >\n                    <Countdown date={nextCountdown}/>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\nimport * as Yup from 'yup';\nimport queryString from \"query-string\";\nimport axios from 'axios';\nimport Error from \"../Error\";\n\nconst apiUrl = `${process.env.REACT_APP_CS_ADMIN_URL}/resetpassword`;\n\nexport default class FormPasswordReset extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            companyId: '',\n            clientId: 0,\n            username: '',\n            token: '',\n            error: false,\n        };\n\n        this.setParams = this.setParams.bind(this);\n        this.resetPassword = this.resetPassword.bind(this);\n    }\n\n    resetPassword = (values) => {\n        const {password} = values;\n        const {clientId, username, token} = this.state;\n        let {companyId} = this.state;\n        if (!companyId) {\n            companyId = '';\n        }\n\n        const data = {\n            clientId: clientId,\n            companyId: companyId,\n            username: username,\n            password: password,\n            token: token,\n        };\n\n        axios.post(apiUrl, data, {})\n            .then(response => {\n                if (response.data.returnCode === 1) {\n                    alert(response.data.returnMessage);\n                    setTimeout(() => {\n                        window.open(\"\", \"_self\");\n                        window.close();\n                    }, 3000);\n                }\n                else {\n                    alert(response.data.returnMessage);\n                }\n        }).catch(error => {\n            alert(\"Hệ thống có lỗi. Vui lòng thử lại sau\");\n            console.error(error);\n        })\n    };\n\n    setParams = (val) => {\n        this.setState({\n            error: false,\n        });\n\n        const values = queryString.parse(val);\n        const {companyId, username, token} = values;\n        let clientId = parseInt(values.clientId);\n\n        if ((clientId < 1 || clientId > 3) ||\n            !username || username === '' ||\n            !token || token === '' ||\n            ((clientId === 2 || clientId === 1) && (!companyId || companyId === ''))) {\n            this.setState({\n                error: true,\n            });\n\n            return;\n        }\n\n        this.setState({\n            companyId: companyId,\n            username: username,\n            clientId: clientId,\n            token: token,\n        });\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (this.props.location.search !== nextProps.location.search) {\n            this.setParams(nextProps.location.search);\n        }\n    }\n\n    componentDidMount() {\n        this.setParams(this.props.location.search);\n    }\n\n    render() {\n        const {error} = this.state;\n        if (error) {\n            return <Error/>\n        }\n\n        return (\n            <div className=\"jumbotron\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-6 offset-md-3\">\n                            <h3 style={{textAlign: 'center', marginBottom: '20px'}}>Thiết lập lại mật khẩu</h3>\n                            <Formik\n                                initialValues={{\n                                    password: '',\n                                    confirmPassword: ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    password: Yup.string()\n                                        .min(6, 'Mật khẩu phải dài ít nhất 6 kí tự')\n                                        .required('Mật khẩu không được rỗng'),\n                                    confirmPassword: Yup.string()\n                                        .oneOf([Yup.ref('password'), null], 'Mật khẩu không khớp')\n                                        .required('Nhập lại mật khẩu không được rỗng')\n                                })}\n                                onSubmit={fields => {\n                                    this.resetPassword(fields);\n                                }}\n                                render={({errors, status, touched}) => (\n                                    <Form>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"password\">Mật khẩu mới</label>\n                                            <Field name=\"password\" type=\"password\"\n                                                   className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')}/>\n                                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\"/>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"confirmPassword\">Nhập lại mật khẩu</label>\n                                            <Field name=\"confirmPassword\" type=\"password\"\n                                                   className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')}/>\n                                            <ErrorMessage name=\"confirmPassword\" component=\"div\"\n                                                          className=\"invalid-feedback\"/>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn-primary mr-2\">Xác nhận</button>\n                                            <button type=\"reset\" className=\"btn btn-secondary\">Xóa</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter, Route} from 'react-router-dom';\nimport FormPasswordReset from \"./resetpassword/FormPasswordReset\";\n\nReactDOM.render((\n    <HashRouter>\n        <div>\n            <Route exact path=\"/genqrcode\" component={App}/>\n            <Route exact path=\"/resetpassword\" component={FormPasswordReset}/>\n        </div>\n    </HashRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/loading.1a197dfc.gif\";"],"sourceRoot":""}