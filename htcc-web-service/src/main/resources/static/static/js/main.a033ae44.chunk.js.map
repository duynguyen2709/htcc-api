{"version":3,"sources":["loading.gif","Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Error","id","className","href","apiUrl","process","App","React","Component","constructor","props","super","setCompanyIdAndOfficeId","val","values","queryString","parse","companyId","officeId","this","setState","setNewImage","state","error","isLoading","now","Date","getTime","url","console","log","nextCountdown","bind","componentWillReceiveProps","nextProps","nextContext","location","search","componentDidMount","task","cron","schedule","render","src","loading","style","display","alt","onLoad","event","onError","destroy","date","withRouter","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","HashRouter","Route","exact","path","component","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a033ae44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.1a197dfc.gif\";","import React from 'react';\n\nconst Error = () => {\n    return (<>\n        <div id=\"notfound\">\n            <div className=\"notfound\">\n                <div className=\"notfound-404\">\n                    <h1>500</h1>\n                </div>\n                <h2>Hệ thống có lỗi. Vui lòng thử lại sau.</h2>\n                <p>Đã xảy ra lỗi khi tải dữ liệu. Vui lòng tải lại trang</p>\n                <p>hoặc liên hệ quản trị viên để được hỗ trợ.</p>\n                {/*eslint-disable-next-line*/}\n                <a href=\"javascript:window.location.reload(true)\">Tải lại trang</a>\n            </div>\n        </div>\n    </>)\n};\n\nexport default Error;\n","import React from 'react';\nimport './index.css';\nimport {withRouter} from 'react-router-dom';\nimport cron from \"node-cron\";\nimport queryString from 'query-string';\nimport Countdown from 'react-countdown';\nimport Error from \"./Error\";\nimport loading from './loading.gif';\n\nconst apiUrl = `${process.env.REACT_APP_CS_ADMIN_URL}/genqrcode`;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: '',\n            isLoading: true,\n            companyId: '',\n            officeId: '',\n            nextCountdown: new Date(),\n            error: false,\n        };\n\n        this.setNewImage = this.setNewImage.bind(this);\n        this.setCompanyIdAndOfficeId = this.setCompanyIdAndOfficeId.bind(this);\n    }\n\n    setCompanyIdAndOfficeId = (val) => {\n        const values = queryString.parse(val);\n        const {companyId, officeId} = values;\n\n        this.setState({\n            companyId: companyId,\n            officeId: officeId\n        }, () => {\n            this.setNewImage();\n        });\n\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (this.props.location.search !== nextProps.location.search) {\n            this.setCompanyIdAndOfficeId(nextProps.location.search);\n        }\n    }\n\n    componentDidMount() {\n        this.setCompanyIdAndOfficeId(this.props.location.search);\n\n        this.task = cron.schedule(\"*/5 * * * *\", () => {\n            this.setNewImage();\n        }, null);\n    }\n\n    setNewImage = () => {\n        if (this.state.error) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        const {companyId, officeId} = this.state;\n        const now = new Date().getTime();\n        // TODO : Remove this, load from config server\n        const url = `${apiUrl}?companyId=${companyId}&officeId=${officeId}&reqDate=${now}`;\n\n        console.log(`Load new QR Code at : ${now}\\nURL = ${url}`);\n        this.setState({\n            url: url,\n            nextCountdown: now + 300000\n        })\n    };\n\n    render() {\n        const {url, nextCountdown, error, isLoading} = this.state;\n\n        if (error) {\n            return <Error/>\n        }\n\n        return (\n            <>\n                <div>\n                    <img src={loading}\n                         style={{display: isLoading ? 'block' : 'none'}}\n                         className={\"center-div\"}\n                         alt={\"loading\"}/>\n\n                    <img alt={\"qrcode\"}\n                         style={{display: isLoading ? 'none' : 'block'}}\n                         className={\"center-div\"}\n                         src={url}\n                         onLoad={(event) => {\n                             this.setState({\n                                 isLoading: false,\n                             })\n                         }}\n                         onError={(event) => {\n                             this.task.destroy();\n                             this.setState({\n                                 error: true\n                             })\n                         }}\n                    />\n                </div>\n                <div className={\"countdown\"}\n                     style={{display: isLoading ? 'none' : 'block'}}\n                >\n                    <Countdown date={nextCountdown}/>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter, Route} from 'react-router-dom';\n\nReactDOM.render((\n    <HashRouter>\n        <div>\n            <Route exact path=\"/genqrcode\" component={App}/>\n        </div>\n    </HashRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}